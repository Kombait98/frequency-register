Desenvolva uma aplicação Cliente Servidor que use sockets, que seja a tela de lançamento de frequencias de uma sala de aula de 10 pessoas

BLACKBOXAI

Para desenvolver uma aplicação Cliente-Servidor que permita o lançamento de frequências de uma sala de aula com 10 pessoas usando sockets em Python, vamos criar um servidor que gerencia as frequências e um cliente que permite a entrada de dados. Abaixo, apresento um exemplo básico de como isso pode ser feito.

Estrutura do Projeto
Servidor: Recebe as frequências dos alunos e as armazena.
Cliente: Permite que o usuário insira a frequência de cada aluno.
Código do Servidor
python
Run
Copy code
import socket
import threading

# Configurações do servidor
HOST = '127.0.0.1'  # Endereço IP do servidor
PORT = 65432        # Porta do servidor

# Lista para armazenar as frequências
frequencias = [None] * 10

def handle_client(conn, addr):
    print(f"Conectado por {addr}")
    while True:
        data = conn.recv(1024)
        if not data:
            break
        index, status = data.decode().split(',')
        index = int(index)
        frequencias[index] = status
        print(f"Frequência recebida: Aluno {index + 1} - {status}")
        conn.sendall(f"Frequência registrada para o aluno {index + 1}".encode())
    conn.close()

def start_server():
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind((HOST, PORT))
        s.listen()
        print("Servidor escutando...")
        while True:
            conn, addr = s.accept()
            threading.Thread(target=handle_client, args=(conn, addr)).start()

if __name__ == "__main__":
    start_server()


Código do Cliente
python
Run
Copy code
import socket

# Configurações do cliente
HOST = '127.0.0.1'  # Endereço IP do servidor
PORT = 65432        # Porta do servidor

def main():
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.connect((HOST, PORT))
        while True:
            try:
                index = int(input("Digite o número do aluno (1-10) ou 0 para sair: ")) - 1
                if index == -1:
                    break
                if index < 0 or index >= 10:
                    print("Número inválido. Tente novamente.")
                    continue
                status = input("Digite a frequência (Presente/Ausente): ")
                s.sendall(f"{index},{status}".encode())
                response = s.recv(1024)
                print(response.decode())
            except ValueError:
                print("Entrada inválida. Tente novamente.")

if __name__ == "__main__":
    main()
Como Executar
Executar o Servidor:

Salve o código do servidor em um arquivo chamado servidor.py.
Execute o servidor em um terminal: python servidor.py.
Executar o Cliente:

Salve o código do cliente em um arquivo chamado cliente.py.
Execute o cliente em outro terminal: python cliente.py.
Funcionamento
O servidor escuta conexões na porta especificada e aceita até 10 alunos.
O cliente solicita ao usuário que insira o número do aluno (1 a 10) e o status de presença (Presente ou Ausente).
O servidor recebe os dados e os armazena na lista frequencias, além de enviar uma confirmação de que a frequência foi registrada.
Observações
Este é um exemplo básico e pode ser expandido com funcionalidades adicionais, como persistência de dados, tratamento de erros mais robusto, interface gráfica, etc.
Para um ambiente de produção, considere usar bibliotecas como asyncio para melhor gerenciamento de conexões assíncronas.
You

transforme esta aplicação em um HTML rodando no servidor


Para transformar uma aplicação Cliente-Servidor que usa sockets em uma aplicação web, você pode utilizar tecnologias como Node.js com Socket.IO. O servidor pode ser configurado para gerenciar conexões WebSocket, permitindo comunicação em tempo real entre o cliente (navegador) e o servidor. O cliente pode ser uma página HTML que se conecta ao servidor via WebSocket, enviando e recebendo dados de forma interativa. ### Estrutura do Projeto

Servidor: Usando Node.js e Socket.IO para gerenciar as frequências.
Cliente: Uma página HTML que permite a entrada de dados e exibe as frequências.
Código do Servidor (Node.js)

javascript
Run
Copy code
const express = require('express');
const http = require('http');
const socketIo = require('socket.io');

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

const frequencias = new Array(10).fill(null);

app.use(express.static('public'));

io.on('connection', (socket) => {
    console.log('Novo cliente conectado');

    socket.on('registrarFrequencia', (data) => {
        const { index, status } = data;
        frequencias[index] = status;
        console.log(`Frequência recebida: Aluno ${index + 1} - ${status}`);
        io.emit('atualizarFrequencias', frequencias);
    });

    socket.on('disconnect', () => {
        console.log('Cliente desconectado');
    });
});

server.listen(3000, () => {
    console.log('Servidor escutando na porta 3000');
});


Código do Cliente (HTML)
html
Run
Copy code
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lançamento de Frequências</title>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();

        function registrarFrequencia() {
            const index = document.getElementById('alunoIndex').value - 1;
            const status = document.getElementById('frequenciaStatus').value;

            if (index >= 0 && index < 10) {
                socket.emit('registrarFrequencia', { index, status });
            } else {
                alert('Número do aluno inválido. Deve ser entre 1 e 10.');
            }
        }

        socket.on('atualizarFrequencias', (frequencias) => {
            const listaFrequencias = document.getElementById('listaFrequencias');
            listaFrequencias.innerHTML = '';
            frequencias.forEach((status, index) => {
                listaFrequencias.innerHTML += `<li>Aluno ${index + 1}: ${status || 'Não registrado'}</li>`;
            });
        });
    </script>
</head>
<body>
    <h1>Lançamento de Frequências</h1>
    <label for="alunoIndex">Número do Aluno (1-10):</label>
    <input type="number" id="alunoIndex" min="1" max="10">
    <label for="frequenciaStatus">Frequência (Presente/Ausente):</label>
    <input type="text" id="frequenciaStatus">
    <button onclick="registrarFrequencia()">Registrar Frequência</button>

    <h2>Frequências Registradas:</h2>
    <ul id="listaFrequencias"></ul>
</body>
</html>
Como Executar
Instalar Dependências:

Crie um diretório para o projeto e navegue até ele.
Execute npm init -y para criar um package.json.
Instale as dependências: npm install express socket.io.
Criar Estrutura de Diretórios:

Crie uma pasta chamada public e coloque o arquivo HTML dentro dela.
Executar o Servidor:

Salve o código do servidor em um arquivo chamado server.js.
Execute o servidor com o comando: node server.js.
Acessar a Aplicação:

Abra um navegador e acesse http://localhost:3000.
Funcionamento
O servidor escuta conexões na porta 3000 e gerencia as frequências dos alunos.
O cliente permite que o usuário insira o número do aluno e o status de presença.
As frequências são atualizadas em tempo real na lista exibida na página HTML.
Observações
Este exemplo utiliza Socket.IO para comunicação em tempo real, permitindo que múltiplos clientes atualizem e visualizem as frequências simultaneamente.
Você pode expandir a aplicação com funcionalidades adicionais, como autenticação de usuários, persistência de dados em um banco de dados, e uma interface mais elaborada.